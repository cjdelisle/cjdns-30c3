<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>cjd</groupId>
  <artifactId>hello-amd</artifactId>
  <version>0.1.0-SNAPSHOT</version>


  <build>

    <plugins>

      <!-- Create the output directory -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>1.4</version>
        <executions>
          <execution>
            <phase>generate-sources</phase>
            <configuration>

              <tasks>
                <echo message="Creating js output directory"/>
                <mkdir dir="./target/closure-compiler-output"/>
              </tasks>

            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- Run the closure compiler -->
      <plugin>
        <groupId>com.dasberg.maven.plugins</groupId>
        <artifactId>maven-closure-compiler-plugin</artifactId>
        <version>1.0.2-SNAPSHOT</version>
        <configuration>
          <compilation_level>ADVANCED_OPTIMIZATIONS</compilation_level>
          <js_dir>src/main/js</js_dir>
          <js_output_dir>target/closure-compiler-output/</js_output_dir>
          <args>
            <!-- -Wall -Wextra -Werror -pedantic -turn-on-all-the-checks -->
            <arg>--jscomp_error=accessControls</arg>
            <arg>--jscomp_error=ambiguousFunctionDecl</arg>
            <arg>--jscomp_error=checkRegExp</arg>
            <arg>--jscomp_error=checkStructDictInheritance</arg>
            <arg>--jscomp_error=checkTypes</arg>
            <arg>--jscomp_error=checkVars</arg>
            <arg>--jscomp_error=const</arg>
            <arg>--jscomp_error=constantProperty</arg>
            <arg>--jscomp_error=deprecated</arg>
            <arg>--jscomp_error=duplicateMessage</arg>
            <arg>--jscomp_error=es5Strict</arg>
            <arg>--jscomp_error=externsValidation</arg>
            <arg>--jscomp_error=fileoverviewTags</arg>
            <arg>--jscomp_error=globalThis</arg>
            <arg>--jscomp_error=internetExplorerChecks</arg>
            <arg>--jscomp_error=invalidCasts</arg>
            <arg>--jscomp_error=misplacedTypeAnnotation</arg>
            <arg>--jscomp_error=missingProperties</arg>
            <arg>--jscomp_error=missingReturn</arg>
            <arg>--jscomp_error=nonStandardJsDocs</arg>
            <!--<arg>jscomp_error=reportUnknownTypes</arg>-->
            <arg>--jscomp_error=suspiciousCode</arg>
            <arg>--jscomp_error=strictModuleDepCheck</arg>
            <arg>--jscomp_error=typeInvalidation</arg>
            <arg>--jscomp_error=undefinedNames</arg>
            <arg>--jscomp_error=undefinedVars</arg>
            <arg>--jscomp_error=unknownDefines</arg>
            <arg>--jscomp_error=uselessCode</arg>
            <arg>--jscomp_error=visibility</arg>
            <arg>--warning_level=VERBOSE</arg>
            <arg>--externs=src/main/conf/closure-externs.js</arg>
          </args>
        </configuration>
        <executions>
          <execution>
            <id>compile-js</id>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>com.google.javascript</groupId>
            <artifactId>closure-compiler</artifactId>
            <version>v20130603</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- Build the RequireJs module -->
      <plugin>
        <groupId>com.github.mcheely</groupId>
        <artifactId>requirejs-maven-plugin</artifactId>
        <version>2.0.0</version>
        <executions>
          <execution>
            <goals>
              <goal>optimize</goal>
            </goals>
            <phase>process-classes</phase>
          </execution>
        </executions>
        <configuration>
            <!-- optional path to a nodejs executable -->
            <!--<nodeExecutable>/opt/nodejs/node</nodeExecutable>-->

            <!-- path to optimizer json config file -->
            <configFile>
                ${basedir}/src/main/conf/requirejs.conf.js
            </configFile>

            <!-- optional path to optimizer executable -->
            <!--<optimizerFile>
                ${basedir}/src/main/scripts/r.js
            </optimizerFile>-->

            <!--
            Whether or not to process configFile with maven filters.
            If you use this option, some options in your configFile
            must resolve to absolute paths (see below)
            -->
            <filterConfig>
                true
            </filterConfig>

            <!-- Skip requirejs optimization if true -->
            <skip>
                false
            </skip>

        </configuration>
      </plugin>

      <!-- Test with phantomjs -->
      <plugin>
        <groupId>cjd</groupId>
        <artifactId>phantomjs-maven</artifactId>
        <version>0.1.0-SNAPSHOT</version>
        <executions>
          <execution>
            <goals>
              <goal>run</goal>
            </goals>
            <phase>test</phase>
          </execution>
        </executions>
        <configuration>
          <cwd>${basedir}/src/test/resources/</cwd>
          <args>
            <arg>run-qunit.js</arg>
            <arg>index.html</arg>
          </args>
        </configuration>
      </plugin>

      <!-- Verify with jslint -->
      <plugin>
        <groupId>com.cj.jshintmojo</groupId>
        <artifactId>jshint-maven-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>lint</goal>
            </goals>
            <phase>verify</phase>
          </execution>
        </executions>
        <configuration>
          <options>
            <!-- // Whether the scan should stop on first error. -->
            passfail: false,
            <!-- Maximum errors before stopping. -->
            maxerr: 50,


            <!-- // Predefined globals -->

            <!-- // Whether the standard browser globals should be predefined. -->
            browser: false,
            <!-- // Whether the Node.js environment globals should be predefined. -->
            node: false,
            <!-- // Whether the Rhino environment globals should be predefined. -->
            rhino: false,
            <!-- // Whether CouchDB globals should be predefined. -->
            couch: false,
            <!-- // Whether the Windows Scripting Host environment globals should be predefined. -->
            wsh: false,

            <!-- // Whether jQuery globals should be predefined. -->
            jquery: false,
            <!-- // Whether Prototype and Scriptaculous globals should be predefined. -->
            prototypejs: false,
            <!-- // Whether MooTools globals should be predefined. -->
            mootools: false,
            <!-- // Whether Dojo Toolkit globals should be predefined. -->
            dojo: false,

            <!-- // Development -->

            <!-- // Whether debugger statements should be allowed. -->
            debug: false,
            <!-- // Whether logging globals should be predefined (console, alert, etc.). -->
            devel: false,


            <!-- // ECMAScript 5 -->

            <!-- // Whether ES5 syntax should be allowed. -->
            es5: false,
            <!-- // Whether the "use strict"; pragma should be required. -->
            strict: false,
            <!-- // Whether global "use strict"; should be allowed (also enables strict). -->
            globalstrict: false,


            <!-- // The Good Parts -->

            <!-- // Whether automatic semicolon insertion should be allowed. -->
            asi: false,
            <!-- // Whether line breaks should not be checked, e.g. `return [\n] x`. -->
            laxbreak: false,
            <!-- // Whether bitwise operators (&, |, ^, etc.) should be forbidden. -->
            bitwise: false,
            <!-- // Whether assignments inside `if`, `for` and `while` should be allowed. Usually -->
            <!-- // conditions and loops are for comparison, not assignments. -->
            boss: false,
            <!-- // Whether curly braces around all blocks should be required. -->
            curly: true,
            <!-- // Whether `===` and `!==` should be required (instead of `==` and `!=`). -->
            eqeqeq: true,
            <!-- // Whether `== null` comparisons should be allowed, even if `eqeqeq` is `true`. -->
            eqnull: false,
            <!-- // Whether `eval` should be allowed. -->
            evil: false,
            <!-- // Whether ExpressionStatement should be allowed as Programs. -->
            expr: false,
            <!-- // Whether `for in` loops must filter with `hasOwnPrototype`. -->
            forin: false,
            <!-- // Whether immediate invocations must be wrapped in parens, e.g. -->
            <!-- // `( function(){}() );`. -->
            immed: true,
            <!-- // Whether use before define should be forbidden. -->
            latedef: true,
            <!-- // Whether functions should be allowed to be defined within loops. -->
            loopfunc: false,
            <!-- // Whether arguments.caller and arguments.callee should be forbidden. -->
            noarg: true,
            <!-- // Whether `.` should be forbidden in regexp literals. -->
            regexp: false,
            <!-- // Whether unescaped first/last dash (-) inside brackets in regexps should be allowed. -->
            regexdash: false,
            <!-- // Whether script-targeted URLs should be allowed. -->
            scripturl: true,
            <!-- // Whether variable shadowing should be allowed. -->
            shadow: false,
            <!-- // Whether `new function () { ... };` and `new Object;` should be allowed. -->
            supernew: false,
            <!-- // Whether variables must be declared before used. -->
            undef: true,
            <!-- // Whether `this` inside a non-constructor function should be allowed. -->
            validthis: false,
            <!-- // Whether smarttabs should be allowed -->
            <!-- // (http://www.emacswiki.org/emacs/SmartTabs). -->
            smarttabs: false,
            <!-- // Whether the `__proto__` property should be allowed. -->
            proto: false,
            <!-- // Whether one-case switch statements should be allowed. -->
            onecase: false,
            <!-- // Whether non-standard (but widely adopted) globals should be predefined. -->
            nonstandard: false,
            <!-- // Allow multiline strings. -->
            multistr: false,
            <!-- // Whether line breaks should not be checked around commas. -->
            laxcomma: false,
            <!-- // Whether semicolons may be ommitted for the trailing statements inside of a -->
            <!-- // one-line blocks. -->
            lastsemic: false,
            <!-- // Whether the `__iterator__` property should be allowed. -->
            iterator: false,
            <!-- // Whether only function scope should be used for scope tests. -->
            funcscope: false,
            <!-- // Whether es.next specific syntax should be allowed. -->
            esnext: false,


            <!-- // Style preferences -->

            <!-- // Whether constructor names must be capitalized. -->
            newcap: true,
            <!-- // Whether empty blocks should be forbidden. -->
            noempty: true,
            <!-- // Whether using `new` for side-effects should be forbidden. -->
            nonew: true,
            <!-- // Whether names should be checked for leading or trailing underscores -->
            <!-- // (object._attribute would be forbidden). -->
            nomen: true,
            <!-- // Whether only one var statement per function should be allowed. -->
            onevar: false,
            <!-- // Whether increment and decrement (`++` and "minusminus") should be forbidden. -->
            plusplus: false,
            <!-- // Whether all forms of subscript notation are allowed. -->
            sub: false,
            <!-- // Whether trailing whitespace rules apply. -->
            trailing: true,
            <!-- // Whether strict whitespace rules apply. -->
            white: false,
            <!-- // Specify indentation. -->
            indent: 4
          </options>
          <globals>
            <!-- // Custom predefined globals. -->
            require:true,
            define:true
          </globals>
          <configFile>src/main/resources/jshint.conf.js</configFile>
          <directories>
            <directory>src/main/js</directory>
          </directories>
          <excludes>
            <!--<exclude>src/main/webapp/hackyScript.js</exclude>-->
            <!--<exclude>src/main/webapp/myDirectoryForThirdyPartyStuff</exclude>-->
          </excludes>
          <failOnError>true</failOnError>
        </configuration>
      </plugin>

    </plugins>

    <!-- Package up the output files -->
    <resources>
      <resource>
        <directory>${basedir}/target/closure-compiler-output</directory>
        <filtering>false</filtering>
        <includes>
          <include>**/*.js</include>
        </includes>
      </resource>
    </resources>

  </build>

</project>
